// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	items "github.com/judesantos/go-bookstore_items_api/domain/items"
	mock "github.com/stretchr/testify/mock"

	queries "github.com/judesantos/go-bookstore_items_api/domain/queries"

	rest_errors "github.com/judesantos/go-bookstore_utils/rest_errors"
)

// IItem is an autogenerated mock type for the IItem type
type IItem struct {
	mock.Mock
}

// Get provides a mock function with given fields:
func (_m *IItem) Get() rest_errors.IRestError {
	ret := _m.Called()

	var r0 rest_errors.IRestError
	if rf, ok := ret.Get(0).(func() rest_errors.IRestError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest_errors.IRestError)
		}
	}

	return r0
}

// Save provides a mock function with given fields:
func (_m *IItem) Save() rest_errors.IRestError {
	ret := _m.Called()

	var r0 rest_errors.IRestError
	if rf, ok := ret.Get(0).(func() rest_errors.IRestError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest_errors.IRestError)
		}
	}

	return r0
}

// Search provides a mock function with given fields: query
func (_m *IItem) Search(query queries.EsQuery) ([]items.Item, rest_errors.IRestError) {
	ret := _m.Called(query)

	var r0 []items.Item
	if rf, ok := ret.Get(0).(func(queries.EsQuery) []items.Item); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]items.Item)
		}
	}

	var r1 rest_errors.IRestError
	if rf, ok := ret.Get(1).(func(queries.EsQuery) rest_errors.IRestError); ok {
		r1 = rf(query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(rest_errors.IRestError)
		}
	}

	return r0, r1
}
